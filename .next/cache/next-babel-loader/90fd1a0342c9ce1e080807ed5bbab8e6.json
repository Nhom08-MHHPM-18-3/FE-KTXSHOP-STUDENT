{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useReducer, useEffect, useContext } from \"react\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport CartContext from \"../../contexts/CartContext\";\n\nvar cartReducer = function cartReducer(state, action) {\n  if (action.type === 'ADD_PRODUCTS') {\n    var productsArray = [];\n    productsArray = action.payload; // console.log('www', productsArray)\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      products: productsArray\n    });\n  }\n\n  if (action.type === 'INIT_CART') {\n    var _ret = function () {\n      var productsArray = [];\n      productsArray = action.payload;\n      var newTotal = 0;\n      var temp = action.payload;\n      var cart = [];\n\n      var _loop = function _loop(i) {\n        var product = state.products.find(function (item) {\n          return item.id === temp[i].attributes.ProductID;\n        });\n        newTotal += temp[i].attributes.Subtotal;\n        cart.push(_objectSpread(_objectSpread({}, temp[i]), {}, {\n          product: product\n        }));\n      };\n\n      for (var i = 0; i < action.payload.length; i++) {\n        _loop(i);\n      }\n\n      return {\n        v: _objectSpread(_objectSpread({}, state), {}, {\n          addedItems: cart,\n          total: newTotal\n        })\n      };\n    }();\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n\n  if (action.type === 'ADD_TO_CART') {\n    var product = action.product;\n    console.log(product);\n    var cart = state.addedItems;\n    cart.push(_objectSpread(_objectSpread({}, action.data), {}, {\n      product: product\n    }));\n    var newTotal = state.total + action.product.attributes.Price * action.quantity;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      addedItems: cart,\n      total: newTotal\n    });\n  }\n\n  if (action.type === 'ADD_QUANTITY_WITH_NUMBER') {\n    var addedItem = state.products.find(function (item) {\n      return item.id === action.id;\n    }); //check if the action id exists in the addedItems\n\n    var existed_item = state.addedItems.find(function (item) {\n      return action.id === item.id;\n    });\n\n    if (existed_item) {\n      addedItem.quantity += action.qty;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        total: state.total + addedItem.newPrice * action.qty\n      });\n    } else {\n      addedItem.quantity = action.qty; //calculating the total\n\n      var _newTotal = state.total + addedItem.newPrice * action.qty;\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addedItems: [].concat(_toConsumableArray(state.addedItems), [addedItem]),\n        total: _newTotal\n      });\n    }\n  }\n\n  if (action.type === 'REMOVE_ITEM') {\n    fetch(process.env.API_HOST + \"/api/shopping-carts/\".concat(action.id), {\n      method: 'DELETE'\n    });\n    var itemToRemove = state.addedItems.find(function (item) {\n      return action.id === item.id;\n    });\n    var new_items = state.addedItems.filter(function (item) {\n      return action.id !== item.id;\n    }); //calculating the total\n\n    var _newTotal2 = state.total - itemToRemove.attributes.Subtotal;\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      addedItems: new_items,\n      total: _newTotal2\n    });\n  }\n\n  if (action.type === 'ADD_QUANTITY') {\n    var _addedItem = state.products.find(function (item) {\n      return item.id === action.id;\n    });\n\n    _addedItem.quantity += 1;\n\n    var _newTotal3 = state.total + _addedItem.newPrice;\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      total: _newTotal3\n    });\n  }\n\n  if (action.type === 'SUB_QUANTITY') {\n    var _addedItem2 = state.products.find(function (item) {\n      return item.id === action.id;\n    }); //if the qt == 0 then it should be removed\n\n\n    if (_addedItem2.quantity === 1) {\n      var _new_items = state.addedItems.filter(function (item) {\n        return item.id !== action.id;\n      });\n\n      var _newTotal4 = state.total - _addedItem2.newPrice;\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addedItems: _new_items,\n        total: _newTotal4\n      });\n    } else {\n      _addedItem2.quantity -= 1;\n\n      var _newTotal5 = state.total - _addedItem2.newPrice;\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        total: _newTotal5\n      });\n    }\n  }\n\n  if (action.type === 'ADD_SHIPPING') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      shipping: state.shipping += 30\n    });\n  }\n\n  if (action.type === 'SUB_SHIPPING') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      shipping: state.shipping -= 30\n    });\n  }\n\n  if (action.type === 'RESET_CART') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      addedItems: [],\n      total: 0,\n      shipping: 0\n    });\n  } else {\n    return state;\n  }\n};\n\nexport var CartProvider = function CartProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState([]),\n      shoppingCart = _useState2[0],\n      setShoppingCart = _useState2[1];\n\n  var _useReducer = useReducer(cartReducer, {\n    products: [],\n    addedItems: [],\n    total: 0,\n    shipping: 0\n  }),\n      cart = _useReducer[0],\n      dispatchCart = _useReducer[1];\n\n  var removeItem = function removeItem(id) {\n    dispatchCart({\n      type: 'REMOVE_ITEM',\n      id: id\n    });\n  };\n\n  var addToCart = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id, quantity) {\n      var product, jwt, myHeaders;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              product = cart.products.find(function (item) {\n                return item.id === id;\n              });\n              jwt = localStorage.getItem('jwt-ktxshop');\n              myHeaders = new Headers();\n              myHeaders.append(\"Content-Type\", \"application/json\");\n              _context.next = 6;\n              return fetch(process.env.API_HOST + '/api/shopping-carts', {\n                method: 'POST',\n                body: JSON.stringify({\n                  data: {\n                    AccountID: jwt,\n                    ProductID: product.id,\n                    Quantity: quantity || 1,\n                    UnitCost: product.attributes.Price,\n                    Subtotal: product.attributes.Price * quantity\n                  }\n                }),\n                headers: myHeaders\n              }).then(function (response) {\n                return response.json();\n              }).then(function (result) {\n                dispatchCart({\n                  type: 'ADD_TO_CART',\n                  data: result.data,\n                  product: product,\n                  quantity: quantity\n                });\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function addToCart(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var addQuantity = function addQuantity(id) {\n    dispatchCart({\n      type: 'ADD_QUANTITY',\n      id: id\n    });\n  };\n\n  var subQuantity = function subQuantity(id) {\n    dispatchCart({\n      type: 'SUB_QUANTITY',\n      id: id\n    });\n  };\n\n  useEffect(function () {\n    fecthProduct();\n  }, []);\n\n  var fecthProduct = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var qs, query, jwt, qry;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              qs = require('qs');\n              query = qs.stringify({\n                sort: ['id:desc'],\n                populate: '*'\n              }, {\n                encodeValuesOnly: true\n              });\n              _context2.next = 4;\n              return fetch(process.env.API_HOST + \"/api/products?\".concat(query)).then(function (response) {\n                return response.json();\n              }).then(function (res) {\n                if (res.data && res.data[0] && res.data[0].attributes) {\n                  var dataProduct = res.data;\n                  dataProduct.map(function (item, index) {\n                    data.push(item);\n                    setData(_toConsumableArray(data));\n                    dispatchCart({\n                      type: 'ADD_PRODUCTS',\n                      payload: data\n                    }); //dispatchCart({ type: 'INIT_CART', payload: data })\n                  });\n                }\n              });\n\n            case 4:\n              jwt = localStorage.getItem('jwt-ktxshop');\n              qry = qs.stringify({\n                filters: {\n                  AccountID: {\n                    $eq: Number(jwt)\n                  }\n                }\n              }, {\n                encodeValuesOnly: true\n              });\n              _context2.next = 8;\n              return fetch(process.env.API_HOST + \"/api/shopping-carts?\".concat(qry)).then(function (response) {\n                return response.json();\n              }).then(function (res) {\n                if (res.data && res.data[0] && res.data[0].attributes) {\n                  var dataCart = res.data;\n                  dataCart.map(function (item, index) {\n                    shoppingCart.push(item);\n                    setShoppingCart(_toConsumableArray(shoppingCart));\n                    dispatchCart({\n                      type: 'INIT_CART',\n                      payload: shoppingCart\n                    });\n                  });\n                }\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function fecthProduct() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(CartContext.Provider, {\n    value: {\n      cart: cart,\n      removeItem: removeItem,\n      addToCart: addToCart,\n      addQuantity: addQuantity,\n      subQuantity: subQuantity\n    }\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}