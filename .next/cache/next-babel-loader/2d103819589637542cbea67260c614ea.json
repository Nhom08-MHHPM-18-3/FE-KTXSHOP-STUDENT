{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useReducer } from \"react\";\nlet account;\nexport const UserContext = React.createContext();\n\nconst userReducer = (state, action) => {\n  // User Logout\n  if (action.type === 'USER_LOGOUT') {\n    window.localStorage.clear();\n    return _objectSpread(_objectSpread({}, state), {}, {\n      login: false\n    });\n  } // Check if load page\n\n\n  if (action.type === 'CHECK_USER_LOGIN') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      account: action.payload,\n      login: true\n    });\n  } // User Login\n\n\n  if (action.type === 'USER_LOGIN') {\n    localStorage.setItem('jwt-ktxshop', action.account.id);\n\n    if (action.account) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        account: action.account,\n        login: true\n      });\n    } else {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        login: false\n      });\n    }\n  }\n};\n\nexport const UserProvider = ({\n  children\n}) => {\n  const {\n    0: user,\n    1: dispatchUser\n  } = useReducer(userReducer, {\n    account: {},\n    login: false\n  });\n\n  const userLogin = account => {\n    dispatchUser({\n      type: 'USER_LOGIN',\n      account\n    });\n  };\n\n  const userLogout = account => {\n    dispatchUser({\n      type: 'USER_LOGOUT',\n      account\n    });\n  };\n\n  useEffect(() => {\n    checkUserLogin();\n  }, []);\n\n  const checkUserLogin = async () => {\n    const jwt = localStorage.getItem('jwt-ktxshop');\n\n    if (jwt != null && jwt != undefined) {\n      let data;\n\n      const qs = require('qs');\n\n      const query = qs.stringify({\n        filters: {\n          id: {\n            $eq: Number(jwt)\n          }\n        }\n      }, {\n        encodeValuesOnly: true\n      });\n      await fetch(process.env.API_HOST + `/api/accounts?${query}`).then(response => response.json()).then(res => {\n        if (res.data && res.data[0] && res.data[0].attributes) {\n          data = res.data[0];\n        }\n      });\n      console.log(data);\n\n      if (data) {\n        dispatchUser({\n          type: 'CHECK_USER_LOGIN',\n          payload: data\n        });\n      }\n    }\n  };\n\n  return __jsx(UserContext.Provider, {\n    value: {\n      login: user.login,\n      account: user.account,\n      userLogin: userLogin,\n      userLogout: userLogout\n    }\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}