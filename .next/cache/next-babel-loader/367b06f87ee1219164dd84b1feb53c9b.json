{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // import { firebase } from '../../firebase';\n// const db = firebase.firestore();\n// const dbOrderRef = db.collection('products');\n\nimport cookie from 'js-cookie';\nimport { ADD_TO_CART, REMOVE_ITEM, SUB_QUANTITY, ADD_QUANTITY, ADD_SHIPPING, ADD_QUANTITY_WITH_NUMBER, RESET_CART, ADD_PRODUCTS, USRER_LOGIN, CHECK_USRER_LOGIN, USRER_LOGOUT } from '../actions/action-types/cart-actions';\nvar token = '76483461103103918uhkjdkjc';\nvar initState = {\n  products: [],\n  addedItems: [],\n  total: 0,\n  shipping: 0,\n  login: false\n};\n\nvar cartReducer = function cartReducer() {// // User Logout\n  // if (action.type === USRER_LOGOUT){\n  //     cookie.remove('_livani_token_')\n  //     return{\n  //         ...state,\n  //         login: false\n  //     }\n  // }\n  // // Check if user login\n  // if (action.type === CHECK_USRER_LOGIN){\n  //     const getToken = cookie.get('_livani_token_')\n  //     if (getToken == token){\n  //         return{\n  //             ...state,\n  //             login: true\n  //         }\n  //     } else {\n  //         return{\n  //             ...state,\n  //             login: false\n  //         }\n  //     }\n  // }\n  // // User Login\n  // if(action.type === USRER_LOGIN){\n  //     cookie.set('_livani_token_', token);\n  //     const getToken = cookie.get('_livani_token_')\n  //     // console.log('token', getToken)\n  //     if (getToken == token){\n  //         return{\n  //             ...state,\n  //             login: true\n  //         }\n  //     } else {\n  //         return{\n  //             ...state,\n  //             login: false\n  //         }\n  //     }\n  // }\n  // if(action.type === ADD_PRODUCTS){\n  //     let productsArray = [];\n  //     dbOrderRef.get()\n  //     .then(res => {\n  //         res.forEach(doc => {\n  //             let productsObj = doc.data();\n  //             productsObj.id = doc.id;\n  //             productsArray.push(productsObj)\n  //         });\n  //     });\n  //     // console.log('www', productsArray)\n  //     return{\n  //         ...state,\n  //         products: productsArray\n  //     }\n  // }\n  // if(action.type === ADD_TO_CART){\n  //     let addedItem = state.products.find(item => item.id === action.id)\n  //     //check if the action id exists in the addedItems\n  //     let existed_item= state.addedItems.find(item=> action.id === item.id)\n  //     if(existed_item)\n  //     {\n  //         addedItem.quantity += 1 \n  //         return {\n  //             ...state,\n  //             total: state.total + addedItem.newPrice \n  //         }\n  //     } else {\n  //         addedItem.quantity = 1;\n  //         //calculating the total\n  //         let newTotal = state.total + addedItem.newPrice \n  //         return {\n  //             ...state,\n  //             addedItems: [...state.addedItems, addedItem],\n  //             total : newTotal\n  //         }\n  //     }\n  // }\n  // if(action.type === ADD_QUANTITY_WITH_NUMBER){\n  //     let addedItem = state.products.find(item => item.id === action.id)\n  //     //check if the action id exists in the addedItems\n  //     let existed_item= state.addedItems.find(item=> action.id === item.id)\n  //     if(existed_item)\n  //     {\n  //         addedItem.quantity += action.qty\n  //         return {\n  //             ...state,\n  //             total: state.total + addedItem.newPrice * action.qty\n  //         }\n  //     } else {\n  //         addedItem.quantity = action.qty;\n  //         //calculating the total\n  //         let newTotal = state.total + addedItem.newPrice * action.qty\n  //         return {\n  //             ...state,\n  //             addedItems: [...state.addedItems, addedItem],\n  //             total : newTotal\n  //         }\n  //     }\n  // }\n  // if(action.type === REMOVE_ITEM){\n  //     let itemToRemove= state.addedItems.find(item=> action.id === item.id)\n  //     let new_items = state.addedItems.filter(item=> action.id !== item.id)\n  //     //calculating the total\n  //     let newTotal = state.total - (itemToRemove.newPrice * itemToRemove.quantity );\n  //     return {\n  //         ...state,\n  //         addedItems: new_items,\n  //         total: newTotal\n  //     }\n  // }\n  // if(action.type === ADD_QUANTITY){\n  //     let addedItem = state.products.find(item=> item.id === action.id)\n  //     addedItem.quantity += 1 \n  //     let newTotal = state.total + addedItem.newPrice\n  //     return {\n  //         ...state,\n  //         total: newTotal\n  //     }\n  // }\n  // if(action.type === SUB_QUANTITY){  \n  //     let addedItem = state.products.find(item=> item.id === action.id) \n  //     //if the qt == 0 then it should be removed\n  //     if(addedItem.quantity === 1){\n  //         let new_items = state.addedItems.filter(item=>item.id !== action.id)\n  //         let newTotal = state.total - addedItem.newPrice\n  //         return {\n  //             ...state,\n  //             addedItems: new_items,\n  //             total: newTotal\n  //         }\n  //     } else {\n  //         addedItem.quantity -= 1\n  //         let newTotal = state.total - addedItem.newPrice\n  //         return {\n  //             ...state,\n  //             total: newTotal\n  //         }\n  //     }\n  // }\n  // if(action.type === ADD_SHIPPING){\n  //     return {\n  //         ...state,\n  //         shipping: state.shipping += 30\n  //     }\n  // }\n  // if(action.type === 'SUB_SHIPPING'){\n  //     return {\n  //         ...state,\n  //         shipping: state.shipping -= 30\n  //     }\n  // }\n  // if(action.type === RESET_CART){\n  //     return {\n  //         ...state,\n  //         addedItems: [],\n  //         total: 0,\n  //         shipping: 0\n  //     }\n  // }\n  // else {\n  //     return state\n  // }\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n};\n\nexport var initStore = function initStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  return createStore(cartReducer, initialState, composeWithDevTools(applyMiddleware(thunk)));\n};","map":{"version":3,"sources":["F:/Năm 4 học kỳ 1/Mô hình hóa phần mềm/New folder (2)/store/reducers/cartReducer.js"],"names":["createStore","applyMiddleware","thunk","composeWithDevTools","cookie","ADD_TO_CART","REMOVE_ITEM","SUB_QUANTITY","ADD_QUANTITY","ADD_SHIPPING","ADD_QUANTITY_WITH_NUMBER","RESET_CART","ADD_PRODUCTS","USRER_LOGIN","CHECK_USRER_LOGIN","USRER_LOGOUT","token","initState","products","addedItems","total","shipping","login","cartReducer","state","action","initStore","initialState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CACA;AACA;AACA;;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,SACIC,WADJ,EAEIC,WAFJ,EAGIC,YAHJ,EAIIC,YAJJ,EAKIC,YALJ,EAMIC,wBANJ,EAOIC,UAPJ,EAQIC,YARJ,EASIC,WATJ,EAUIC,iBAVJ,EAWIC,YAXJ,QAYO,sCAZP;AAcA,IAAMC,KAAK,GAAG,2BAAd;AAEA,IAAMC,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,EADI;AAEdC,EAAAA,UAAU,EAAC,EAFG;AAGdC,EAAAA,KAAK,EAAE,CAHO;AAIdC,EAAAA,QAAQ,EAAE,CAJI;AAKdC,EAAAA,KAAK,EAAE;AALO,CAAlB;;AAQA,IAAMC,WAAW,GAAG,SAAdA,WAAcuEAAtBP,SAAsB;AAAA,MAAXQ,MAAW;AAgMlD,CAhMD;;AAkMA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAA8B;AAAA,MAA7BC,YAA6B,uEAAdV,SAAc;AACnD,SAAOjB,WAAW,CACduB,WADc,EAEdI,YAFc,EAGdxB,mBAAmB,CAACF,eAAe,CAACC,KAAD,CAAhB,CAHL,CAAlB;AAKH,CANM","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n// import { firebase } from '../../firebase';\r\n// const db = firebase.firestore();\r\n// const dbOrderRef = db.collection('products');\r\nimport cookie from 'js-cookie';\r\n\r\nimport { \r\n    ADD_TO_CART,\r\n    REMOVE_ITEM,\r\n    SUB_QUANTITY,\r\n    ADD_QUANTITY, \r\n    ADD_SHIPPING,\r\n    ADD_QUANTITY_WITH_NUMBER,\r\n    RESET_CART,\r\n    ADD_PRODUCTS,\r\n    USRER_LOGIN,\r\n    CHECK_USRER_LOGIN,\r\n    USRER_LOGOUT\r\n} from '../actions/action-types/cart-actions'\r\n\r\nconst token = '76483461103103918uhkjdkjc';\r\n\r\nconst initState = {\r\n    products: [],\r\n    addedItems:[],\r\n    total: 0,\r\n    shipping: 0,\r\n    login: false\r\n}\r\n\r\nconst cartReducer = (state = initState, action) => {\r\n\r\n    // // User Logout\r\n    // if (action.type === USRER_LOGOUT){\r\n    //     cookie.remove('_livani_token_')\r\n    //     return{\r\n    //         ...state,\r\n    //         login: false\r\n    //     }\r\n    // }\r\n\r\n    // // Check if user login\r\n    // if (action.type === CHECK_USRER_LOGIN){\r\n    //     const getToken = cookie.get('_livani_token_')\r\n\r\n    //     if (getToken == token){\r\n    //         return{\r\n    //             ...state,\r\n    //             login: true\r\n    //         }\r\n    //     } else {\r\n    //         return{\r\n    //             ...state,\r\n    //             login: false\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // // User Login\r\n    // if(action.type === USRER_LOGIN){\r\n    //     cookie.set('_livani_token_', token);\r\n\r\n    //     const getToken = cookie.get('_livani_token_')\r\n\r\n    //     // console.log('token', getToken)\r\n\r\n    //     if (getToken == token){\r\n    //         return{\r\n    //             ...state,\r\n    //             login: true\r\n    //         }\r\n    //     } else {\r\n    //         return{\r\n    //             ...state,\r\n    //             login: false\r\n    //         }\r\n    //     }\r\n        \r\n    // }\r\n\r\n    // if(action.type === ADD_PRODUCTS){\r\n    //     let productsArray = [];\r\n    //     dbOrderRef.get()\r\n    //     .then(res => {\r\n    //         res.forEach(doc => {\r\n    //             let productsObj = doc.data();\r\n    //             productsObj.id = doc.id;\r\n    //             productsArray.push(productsObj)\r\n    //         });\r\n    //     });\r\n\r\n    //     // console.log('www', productsArray)\r\n        \r\n    //     return{\r\n    //         ...state,\r\n    //         products: productsArray\r\n    //     }\r\n    // }\r\n   \r\n    // if(action.type === ADD_TO_CART){\r\n    //     let addedItem = state.products.find(item => item.id === action.id)\r\n    //     //check if the action id exists in the addedItems\r\n    //     let existed_item= state.addedItems.find(item=> action.id === item.id)\r\n    //     if(existed_item)\r\n    //     {\r\n    //         addedItem.quantity += 1 \r\n    //         return {\r\n    //             ...state,\r\n    //             total: state.total + addedItem.newPrice \r\n    //         }\r\n    //     } else {\r\n    //         addedItem.quantity = 1;\r\n    //         //calculating the total\r\n    //         let newTotal = state.total + addedItem.newPrice \r\n            \r\n    //         return {\r\n    //             ...state,\r\n    //             addedItems: [...state.addedItems, addedItem],\r\n    //             total : newTotal\r\n    //         }\r\n            \r\n    //     }\r\n    // }\r\n\r\n    // if(action.type === ADD_QUANTITY_WITH_NUMBER){\r\n    //     let addedItem = state.products.find(item => item.id === action.id)\r\n    //     //check if the action id exists in the addedItems\r\n    //     let existed_item= state.addedItems.find(item=> action.id === item.id)\r\n    //     if(existed_item)\r\n    //     {\r\n    //         addedItem.quantity += action.qty\r\n    //         return {\r\n    //             ...state,\r\n    //             total: state.total + addedItem.newPrice * action.qty\r\n    //         }\r\n    //     } else {\r\n    //         addedItem.quantity = action.qty;\r\n    //         //calculating the total\r\n    //         let newTotal = state.total + addedItem.newPrice * action.qty\r\n            \r\n    //         return {\r\n    //             ...state,\r\n    //             addedItems: [...state.addedItems, addedItem],\r\n    //             total : newTotal\r\n    //         }\r\n            \r\n    //     }\r\n    // }\r\n    \r\n\r\n    // if(action.type === REMOVE_ITEM){\r\n    //     let itemToRemove= state.addedItems.find(item=> action.id === item.id)\r\n    //     let new_items = state.addedItems.filter(item=> action.id !== item.id)\r\n        \r\n    //     //calculating the total\r\n    //     let newTotal = state.total - (itemToRemove.newPrice * itemToRemove.quantity );\r\n\r\n    //     return {\r\n    //         ...state,\r\n    //         addedItems: new_items,\r\n    //         total: newTotal\r\n    //     }\r\n    // }\r\n\r\n    // if(action.type === ADD_QUANTITY){\r\n    //     let addedItem = state.products.find(item=> item.id === action.id)\r\n    //     addedItem.quantity += 1 \r\n    //     let newTotal = state.total + addedItem.newPrice\r\n    //     return {\r\n    //         ...state,\r\n    //         total: newTotal\r\n    //     }\r\n    // }\r\n\r\n    // if(action.type === SUB_QUANTITY){  \r\n    //     let addedItem = state.products.find(item=> item.id === action.id) \r\n    //     //if the qt == 0 then it should be removed\r\n    //     if(addedItem.quantity === 1){\r\n    //         let new_items = state.addedItems.filter(item=>item.id !== action.id)\r\n    //         let newTotal = state.total - addedItem.newPrice\r\n    //         return {\r\n    //             ...state,\r\n    //             addedItems: new_items,\r\n    //             total: newTotal\r\n    //         }\r\n    //     } else {\r\n    //         addedItem.quantity -= 1\r\n    //         let newTotal = state.total - addedItem.newPrice\r\n    //         return {\r\n    //             ...state,\r\n    //             total: newTotal\r\n    //         }\r\n    //     }\r\n        \r\n    // }\r\n\r\n    // if(action.type === ADD_SHIPPING){\r\n    //     return {\r\n    //         ...state,\r\n    //         shipping: state.shipping += 30\r\n    //     }\r\n    // }\r\n\r\n    // if(action.type === 'SUB_SHIPPING'){\r\n    //     return {\r\n    //         ...state,\r\n    //         shipping: state.shipping -= 30\r\n    //     }\r\n    // }\r\n\r\n    // if(action.type === RESET_CART){\r\n    //     return {\r\n    //         ...state,\r\n    //         addedItems: [],\r\n    //         total: 0,\r\n    //         shipping: 0\r\n    //     }\r\n    // }\r\n    \r\n    // else {\r\n    //     return state\r\n    // }\r\n}\r\n\r\nexport const initStore = (initialState = initState) => {\r\n    return createStore(\r\n        cartReducer,\r\n        initialState,\r\n        composeWithDevTools(applyMiddleware(thunk))\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}